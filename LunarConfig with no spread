getgenv().LunarConfig = {
    ["SilentAim"] = {
        ["Enabled"] = true,
        ["TargetPart"] = "Head",
        ["AirborneTarget"] = "Head",
        ["PredictionFactor"] = 0.3,
        ["HitChance"] = 99,
    },
    ["Aimbot"] = {
        ["Notify"] = true,
        ["Keybind"] = "C",
        ["Enabled"] = true,
        ["PredictionFactor"] = 0.2,
        ["Smoothing"] = 0.2,
        ["TargetPart"] = "Head",
        ["Air"] = {
            ["Enabled"] = false,
            ["Smoothing"] = 0.05,
            ["PredictionFactor"] = 0.2,
            ["Part"] = "Head",
        },
        ["Offsets"] = { ["Jump"] = -1.50, ["Fall"] = 0 },
    }
}

local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local camera = workspace.CurrentCamera
local localPlayer = game:GetService("Players").LocalPlayer
local StarterGui = game:GetService("StarterGui")

local function displayNotification(message)
    local notification = Instance.new("TextLabel")
    notification.Parent = StarterGui.ScreenGui
    notification.Size = UDim2.new(0, 200, 0, 50)
    notification.Position = UDim2.new(0.5, -100, 0.8, 0)
    notification.BackgroundTransparency = 0.5
    notification.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    notification.TextColor3 = Color3.fromRGB(255, 255, 255)
    notification.Text = message
    notification.TextSize = 20
    notification.TextStrokeTransparency = 0.8
    notification.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    notification.Font = Enum.Font.SourceSans
    wait(3)
    notification:Destroy()
end

local function getBestTarget()
    local target, closestDist = nil, math.huge
    local mousePos = UserInputService:GetMouseLocation()

    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local targetPart = player.Character:FindFirstChild(LunarConfig["SilentAim"]["TargetPart"])
            if targetPart then
                local predictedPos = targetPart.Position + (targetPart.Velocity * LunarConfig["SilentAim"]["PredictionFactor"])
                local screenPos, visible = camera:WorldToViewportPoint(predictedPos)
                local distance = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
                if visible and distance < closestDist and math.random(1, 100) <= LunarConfig["SilentAim"]["HitChance"] then
                    target, closestDist = targetPart, distance
                end
            end
        end
    end
    return target
end

local aiming = false
local lockedTarget = nil
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.C then
        aiming = not aiming
        if not aiming then lockedTarget = nil end
    end
end)

RunService.RenderStepped:Connect(function()
    if LunarConfig["Aimbot"]["Enabled"] and aiming then
        if not lockedTarget then
            lockedTarget = getBestTarget()
        end
        if lockedTarget then
            local predictedPos = lockedTarget.Position + (lockedTarget.Velocity * LunarConfig["Aimbot"]["PredictionFactor"])
            camera.CFrame = camera.CFrame:Lerp(CFrame.new(camera.CFrame.Position, predictedPos), LunarConfig["Aimbot"]["Smoothing"])
        end
    end
end)

local oldNamecall;
oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()
    local args = {...}
    
    if method == "FindPartOnRayWithIgnoreList" and LunarConfig["SilentAim"]["Enabled"] and lockedTarget then
        local direction = (lockedTarget.Position - camera.CFrame.Position).unit * 500
        args[1] = Ray.new(camera.CFrame.Position, direction)
        return oldNamecall(self, unpack(args))
    end
    
    return oldNamecall(self, ...)
end)

-- hc spread mod

getgenv().Reduction = 20

local OldCFrameAngles; OldCFrameAngles = hookfunction(CFrame.Angles, function(...)
    local X, Y, Z = ...

    if select(4, ...) == "webhate is daddy" then
        return OldCFrameAngles(X, Y, Z)
    end

    local Caller = getcallingscript()

    if Caller and Caller.Name == "LocalScript" and X ~= 0 and Y == 0 and Z == 0 then
        local SpreadReduction = 1 - (Reduction / 100)
        return OldCFrameAngles(X * SpreadReduction, Y, Z)
    end

    return OldCFrameAngles(X, Y, Z)
end)

local Players, Workspace = game:GetService("Players"), game:GetService("Workspace")
local Player = Players.LocalPlayer

local SpreadPatterns = {
    -1.35,
    -0.9,
    0.25,
    0.55,
    1
}

local OldNamecall; OldNamecall = hookmetamethod(game, "__namecall", function(Self, ...)
    local Arguments, Method = { ... }, getnamecallmethod()

    if Method == "FireServer" and Arguments[1] == "Shoot" then
        local RemoteOrigin, MousePosition = Arguments[2][3], Arguments[2][4]
        local ServerTimeNow = Workspace.GetServerTimeNow(Workspace)
        local RandomGenerator = Random.new(ServerTimeNow)

        Arguments[2][5] = ServerTimeNow

        local Character = Player.Character
        local Tool = Character.FindFirstChildOfClass(Character, "Tool")
        local Module = Tool.FindFirstChild(Tool, "GunData")

        if Module and require(Module).is_shotgun then
            local SpreadResults = Arguments[2][1]

            local RandomAngleZ = RandomGenerator.NextNumber(RandomGenerator, -90, 90)
            local ZAxisRotation = CFrame.Angles(0, 0, math.rad(RandomAngleZ), "webhate is daddy")
            local SpreadIntensity = RandomGenerator.NextNumber(RandomGenerator, 0, 5.75) * (RandomGenerator.NextInteger(RandomGenerator, 0, 1) == 1 and 1 or -1)

            if SpreadIntensity > -0.35 and SpreadIntensity < 0.35 then
                SpreadIntensity = 0.35;
            end;

            for Index, SpreadEntry in next, SpreadResults do
                local DirectionToPosition = (MousePosition - RemoteOrigin).Unit

                local Unit = (CFrame.new(RemoteOrigin, RemoteOrigin + DirectionToPosition) * ZAxisRotation * CFrame.Angles(math.rad(SpreadPatterns[Index] * SpreadIntensity), 0, 0, "webhate is daddy")).LookVector

                SpreadEntry.Position = RemoteOrigin + (Unit * (MousePosition - RemoteOrigin).Magnitude)
            end
        end
    end

    return OldNamecall(Self, ...)
end)
